{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* 项目 */
    // "incremental": true,                             /* 启用增量编译 */
    // "composite": true,                               /* 启用允许 TypeScript 项目与项目引用一起使用的约束。 */
    // "tsBuildInfoFile": "./",                         /* 指定.tsbuildinfo增量编译文件的文件夹。 */
    // "disableSourceOfProjectReferenceRedirect": true, /* 在引用复合项目时禁用首选源文件而不是声明文件 */
    // "disableSolutionSearching": true,                /* 在编辑时从多项目引用检查中选择一个项目。 */
    // "disableReferencedProjectLoad": true,            /* 减少 TypeScript 自动加载的项目数量。 */

    /* 语言和环境 */
    "target": "ESNext",                                  /* 为发出的 JavaScript 设置 JavaScript 语言版本并包含兼容的库声明。 */
    // "lib": [],                                        /* 指定一组描述目标运行时环境的捆绑库声明文件。 */
    // "jsx": "preserve",                                /* 指定生成什么 JSX 代码。 */
    // "experimentalDecorators": true,                   /* 启用对 TC39 阶段 2 草案装饰器的实验支持。 */
    // "emitDecoratorMetadata": true,                    /* 为源文件中的装饰声明发出设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定针对 React JSX 发出时使用的 JSX 工厂函数，例如'React.createElement' 或 'h' */
    // "jsxFragmentFactory": "",                         /* 指定在针对 React JSX 发出时用于片段的 JSX 片段引用，例如'React.Fragment' 或 'Fragment'。 */
    // "jsxImportSource": "",                            /* 指定使用`jsx: react-jsx*`时用于导入JSX工厂函数的模块说明符*/
    // "reactNamespace": "",                             /* 指定为 `createElement` 调用的对象。这仅适用于以 `react` JSX 发出为目标的情况。 */
    // "noLib": true,                                    /* 禁用包括任何库文件，包括默认的 lib.d.ts。 */
    // "useDefineForClassFields": true,                  /* 发出符合 ECMAScript 标准的类字段。 */

    /* 模块 */
    "module": "commonjs",                                /* 指定生成什么模块代码。 */
    // "rootDir": "./",                                  /* 指定源文件中的根文件夹。 */
    // "moduleResolution": "node",                       /* 指定 TypeScript 如何从给定的模块说明符中查找文件。 */
    // "baseUrl": "./",                                  /* 指定解析非相关模块名称的基目录。 */
    // "paths": {},                                      /* 指定一组将导入重新映射到其他查找位置的条目。 */
    // "rootDirs": [],                                   /* 解析模块时允许将多个文件夹视为一个文件夹。 */
    // "typeRoots": [],                                  /* 指定多个文件夹，其作用类似于 `./node_modules/@types`。 */
    // "types": [],                                      /* 指定要包含在源文件中而不被引用的类型包名称。 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量。 */
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件 */
    // "noResolve": true,                                /* 禁止 `import`s、`require`s 或 `<reference>`s 扩展 TypeScript 应该添加到项目中的文件数量。 */

    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为程序的一部分。使用 `checkJS` 选项从这些文件中获取错误。 */
    // "checkJs": true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定用于检查来自`node_modules`的JavaScript文件的最大文件夹深度。仅适用于 `allowJs`。 */

    /* 触发 */
    // "declaration": true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */
    // "declarationMap": true,                           /* 为 d.ts 文件创建源映射。 */
    // "emitDeclarationOnly": true,                      /* 只输出 d.ts 文件而不是 JavaScript 文件。 */
    // "sourceMap": true,                                /* 为发出的 JavaScript 文件创建源映射文件。 */
    // "outFile": "./",                                  /* 指定一个将所有输出捆绑到一个 JavaScript 文件中的文件。如果 `declaration` 为真，还指定一个捆绑所有 .d.ts 输出的文件。 */
    // "outDir": "./",                                   /* 为所有发出的文件指定一个输出文件夹。 */
    // "removeComments": true,                           /* 禁止发出评论。 */
    // "noEmit": true,                                   /* 禁止从编译中发出文件。 */
    // "importHelpers": true,                            /* 允许每个项目从 tslib 导入一次辅助函数，而不是每个文件都包含它们。 */
    // "importsNotUsedAsValues": "remove",               /* 为仅用于类型的导入指定发出/检查行为 */
    // "downlevelIteration": true,                       /* 为迭代发出更合规但冗长且性能较低的 JavaScript。 */
    // "sourceRoot": "",                                 /* 指定调试器查找参考源代码的根路径。 */
    // "mapRoot": "",                                    /* 指定调试器应该定位地图文件而不是生成位置的位置。 */
    // "inlineSourceMap": true,                          /* 在发出的 JavaScript 中包含源映射文件。 */
    // "inlineSources": true,                            /* 在发出的 JavaScript 内的源映射中包含源代码。 */
    // "emitBOM": true,                                  /* 在输出文件的开头发出 UTF-8 字节顺序标记 (BOM)。 */
    // "newLine": "crlf",                                /* 设置发出文件的换行符。 */
    // "stripInternal": true,                            /* 禁用在其 JSDoc 注释中包含 `@internal` 的发出声明。 */
    // "noEmitHelpers": true,                            /* 禁止在编译输出中生成自定义帮助函数，如`__extends`。 */
    // "noEmitOnError": true,                            /* 如果报告任何类型检查错误，则禁用发射文件。 */
    // "preserveConstEnums": true,                       /* 禁止擦除生成代码中的 `const enum` 声明。 */
    // "declarationDir": "./",                           /* 指定生成的声明文件的输出目录。 */
    // "preserveValueImports": true,                     /* 在 JavaScript 输出中保留未使用的导入值，否则会被删除。 */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* 确保每个文件都可以安全地转译，而不依赖于其他导入。 */
    // "allowSyntheticDefaultImports": true,             /* 当模块没有默认导出时，允许“从 y 导入 x”。 */
    "esModuleInterop": true,                             /* 触发额外的 JavaScript 以简化对导入 CommonJS 模块的支持。 这将启用 `allowSyntheticDefaultImports` 以实现类型兼容性。 */
    // "preserveSymlinks": true,                         /* 禁用解析符号链接到它们的真实路径。 这与节点中的相同标志相关。 */
    "forceConsistentCasingInFileNames": true,            /* 确保导入中的大小写正确。 */

    /* 类型检查 */
    "strict": true,                                      /* 启用所有严格的类型检查选项。 */
    "noImplicitAny": true,                               /* 为隐含的 `any` 类型的表达式和声明启用错误报告.. */
    // "strictNullChecks": true,                         /* 类型检查时，考虑`null`和`undefined`。 */
    // "strictFunctionTypes": true,                      /* 在分配函数时，检查以确保参数和返回值是子类型兼容的。 */
    // "strictBindCallApply": true,                      /* 检查`bind`、`call` 和`apply` 方法的参数是否与原始函数匹配。 */
    // "strictPropertyInitialization": true,              /* 检查在构造函数中声明但未设置的类属性。 */
    // "noImplicitThis": true,                            /* 当 `t​​his` 的类型为 `any` 时启用错误报告。 */
    // "useUnknownInCatchVariables": true,                /* 将 catch 子句变量键入为“unknown”而不是“any”。 */
    // "alwaysStrict": true,                              /* 确保始终发出 'use strict'。 */
    // "noUnusedLocals": true,                            /* 未读取局部变量时启用错误报告。 */
    // "noUnusedParameters": true,                        /* 未读取函数参数时引发错误 */
    // "exactOptionalPropertyTypes": true,                /* 将可选属性类型解释为书面形式，而不是添加“未定义”。 */
    // "noImplicitReturns": true,                         /* 为未在函数中显式返回的代码路径启用错误报告。 */
    // "noFallthroughCasesInSwitch": true,                /* 为 switch 语句中的 fallthrough 情况启用错误报告。 */
    // "noUncheckedIndexedAccess": true,                  /* 在索引签名结果中包含 'undefined' */
    // "noImplicitOverride": true,                        /* 确保派生类中的覆盖成员用覆盖修饰符标记。 */
    // "noPropertyAccessFromIndexSignature": true,        /* 强制对使用索引类型声明的键使用索引访问器 */
    // "allowUnusedLabels": true,                         /* 禁用未使用标签的错误报告。 */
    // "allowUnreachableCode": true,                      /* 禁用无法访问代码的错误报告。 */

    /* 完整性 */
    // "skipDefaultLibCheck": true, /* 跳过 TypeScript 中包含的类型检查 .d.ts 文件。 */
    "skipLibCheck": true                                  /* 跳过类型检查所有 .d.ts 文件。 */
  },
  "exclude": ["node_modules"]
}
